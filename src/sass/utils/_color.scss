@use "sass:math";

// Valiables
$colors: () !default;

// Monotone
$color-white: #ffffff !default;
$color-light: #b4b4b4 !default;
$color-gray: #787878 !default;
$color-dark: #3c3c3c !default;
$color-black: #000000 !default;
$colors: map-merge(
    (
        "white": $color-white,
        "light": $color-light,
        "gray": $color-gray,
        "dark": $color-dark,
        "black": $color-black,
    ),
    $colors
);

// Primary
$color-primary-red: #ff0000 !default;
$color-primary-green: #00ff00 !default;
$color-primary-blue: #0000ff !default;
$color-primary-yellow: #ffff00 !default;
$color-primary-magenta: #ff00ff !default;
$color-primary-cyan: #00ffff !default;
$colors: map-merge(
    (
        "primary-red": $color-primary-red,
        "primary-green": $color-primary-green,
        "primary-blue": $color-primary-blue,
        "primary-yellow": $color-primary-yellow,
        "primary-magenta": $color-primary-magenta,
        "primary-cyan": $color-primary-cyan,
    ),
    $colors
);

// Etc.
$color-red: #ff061f !default;
$color-green: #00a656 !default;
$color-blue: #0062ff !default;
$color-yellow: #ffe500 !default;
$color-magenta: #ff00e5 !default;
$color-cyan: #00e5ff !default;

$color-pink: #ff0684 !default;
$color-purple: #641ee5 !default;
$color-orange: #ff7a00 !default;
$color-teal: #00f8ab !default;

$colors: map-merge(
    (
        "red": $color-red,
        "green": $color-green,
        "blue": $color-blue,
        "yellow": $color-yellow,
        "magenta": $color-magenta,
        "cyan": $color-cyan,

        "pink": $color-pink,
        "purple": $color-purple,
        "orange": $color-orange,
        "teal": $color-teal,
    ),
    $colors
);

// set lighter and darker
$light-colors: () !default;
$dark-colors: () !default;
@each $colorName, $colorCode in $colors {
    @if $colorName != "light" and $colorName != "dark" {
        @if $colorName != "white" {
            $light-colors: map-merge(
                (
                    $colorName: mix($color-light, $colorCode, 25%),
                ),
                $light-colors
            );
        }

        @if $colorName != "black" {
            $dark-colors: map-merge(
                (
                    $colorName: mix($color-dark, $colorCode, 25%),
                ),
                $dark-colors
            );
        }
    }
}

:root {
    @each $colorName, $colorCode in $colors {
        --color-#{$colorName}: #{$colorCode};
    }

    @each $colorName, $colorCode in $light-colors {
        --color-light-#{$colorName}: #{$colorCode};
    }

    @each $colorName, $colorCode in $dark-colors {
        --color-dark-#{$colorName}: #{$colorCode};
    }
}

// --------------------

// Mixins
@mixin color($key, $mode: null) {
    color: getColor($key, $mode);
}

@mixin backgroundColor($key, $mode: null) {
    background-color: getColor($key, $mode);
}

// --------------------

// Functions
@function getColor($key, $mode: null) {
    @if $mode == "light" {
        @return map-get($light-colors, $key);
    } @else if $mode == "dark" {
        @return map-get($dark-colors, $key);
    } @else {
        @return map-get($colors, $key);
    }
}

@function colorContrast($targetColor) {
    @if luminance($targetColor) > 0.5 {
        @return $color-dark;
    } @else {
        @return $color-light;
    }
}

@function luminance($color) {
    $colors: (
        "red": red($color),
        "green": green($color),
        "blue": blue($color),
    );

    @each $name, $value in $colors {
        $adjusted: 0;
        $value: calc($value / 255);

        @if $value < 0.03928 {
            $value: calc($value / 12.92);
        } @else {
            $value: calc(($value + 0.055) / 1.055);
            $value: math.pow($value, 2.4);
        }

        $colors: map-merge(
            $colors,
            (
                $name: $value,
            )
        );
    }

    @return (map-get($colors, "red") * 0.2126) + (map-get($colors, "green") * 0.7152) +
        (map-get($colors, "blue") * 0.0722);
}
